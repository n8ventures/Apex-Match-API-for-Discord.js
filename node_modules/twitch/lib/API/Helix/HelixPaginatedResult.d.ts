/**
 * A result coming from a Helix resource that is paginated using a cursor.
 */
import { ConstructedType } from '@d-fischer/shared-utils';
import TwitchClient from '../../TwitchClient';
import { HelixPaginatedResponse, HelixPaginatedResponseWithTotal } from './HelixResponse';
export default interface HelixPaginatedResult<T> {
    /**
     * The returned data.
     */
    data: T[];
    /**
     * A cursor for traversing more results.
     */
    cursor?: string;
}
/**
 * A result coming from a Helix resource that is paginated using a cursor, also including a total number of items.
 */
export interface HelixPaginatedResultWithTotal<T> {
    /**
     * The returned data.
     */
    data: T[];
    /**
     * A cursor for traversing more results.
     */
    cursor: string;
    /**
     * The total number of items.
     */
    total: number;
}
/** @private */
export declare function createPaginatedResult<I extends object, O extends new (data: I, client: TwitchClient) => any>(response: HelixPaginatedResponse<I>, type: O, client: TwitchClient): HelixPaginatedResult<ConstructedType<O>>;
/** @private */
export declare function createPaginatedResultWithTotal<I extends object, O extends new (data: I, client: TwitchClient) => any>(response: HelixPaginatedResponseWithTotal<I>, type: O, client: TwitchClient): HelixPaginatedResultWithTotal<ConstructedType<O>>;

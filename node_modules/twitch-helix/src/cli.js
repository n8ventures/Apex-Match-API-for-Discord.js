#!/usr/bin/env node
"use strict";var _commander=require("commander"),_commander2=_interopRequireDefault(_commander),_prettyjson=require("prettyjson"),_prettyjson2=_interopRequireDefault(_prettyjson),_winston=require("winston"),_winston2=_interopRequireDefault(_winston),_index=require("./index"),_index2=_interopRequireDefault(_index);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}try{require("dotenv").config()}catch(error){}_winston2.default.cli(),_commander2.default.description("Command line interface for querying data from Twitch Helix API").usage("[options] <api-query>").option("-c, --client-id [value]","Twitch application client ID",process.env.TWITCH_CLIENT_ID).option("-s, --client-secret [value]","Twitch application client secret",process.env.TWITCH_CLIENT_SECRET).option("--kraken","Using the Kraken endpoint instead of the Helix endpoint").parse(process.argv),_commander2.default.args[0]||(_commander2.default.outputHelp(),process.exit(0));const query=_commander2.default.args[0],twitchApi=new _index2.default({clientId:_commander2.default.clientId,clientSecret:_commander2.default.clientSecret});twitchApi.on("log-info",_winston2.default.info),twitchApi.on("log-warn",_winston2.default.warn),twitchApi.on("log-error",_winston2.default.error);const queryOptions={api:_commander2.default.kraken?"kraken":"helix"};twitchApi.sendApiRequest(query,queryOptions).then(({response,body})=>{const rateLimit=response.headers["ratelimit-limit"],rateLimitRemaining=response.headers["ratelimit-remaining"],rateLimitReset=response.headers["ratelimit-reset"],statusLine=`${response.statusCode} ${response.statusMessage} (${rateLimitRemaining}/${rateLimit} requests remaining for ${Math.ceil(rateLimitReset-Date.now()/1e3)} seconds)`;_winston2.default.info(statusLine+"\n"+_prettyjson2.default.render(body))}).catch(error=>{_winston2.default.error(error instanceof Error?error.stack:new Error(error).stack),process.exit(1)});